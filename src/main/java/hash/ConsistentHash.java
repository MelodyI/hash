/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hash;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import com.google.common.hash.HashFunction;
import java.nio.charset.Charset;

public class ConsistentHash<T> {

    private final HashFunction hashFunction;
    private final int numberOfReplicas;
    private final SortedMap<Long, T> circle = new TreeMap<Long, T>();

    public ConsistentHash(HashFunction hashFunction
        , int numberOfReplicas, Collection<T> nodes) {
        this.hashFunction = hashFunction;
        this.numberOfReplicas = numberOfReplicas;
        for (T node : nodes) add(node);
    }

    public void add(T node) {
        for (int i = 0; i < numberOfReplicas; i++) {
            final String nodeName = String.format("%s#%d", node.toString(), i);
            final long hash = hashFunction.hashString(nodeName
                , Charset.defaultCharset()).asLong();
            circle.put(hash, node);
        }
    }

    public void remove(T node) {
        for (int i = 0; i < numberOfReplicas; i++) {
            final String nodeName = String.format("%s#%d", node.toString(), i);
            final long hash = hashFunction.hashString(nodeName
                , Charset.defaultCharset()).asLong();
            circle.remove(hash);
        }
    }

    public T get(Object key) {
        if (circle.isEmpty()) {
            return null;
        }
        long hash = hashFunction.hashString(key.toString()
            , Charset.defaultCharset()).asLong();
        if (!circle.containsKey(hash)) {
            SortedMap<Long, T> tailMap = circle.tailMap(hash);
            hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();
        }
        return circle.get(hash);
    }

}
